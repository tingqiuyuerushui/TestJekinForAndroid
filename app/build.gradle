apply plugin: 'com.android.application'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"

    defaultConfig {
        applicationId "com.xw.sample.dashboardviewdemo"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 2
        versionName "2.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug{
            testCoverageEnabled true
        }
    }
    lintOptions {
        abortOnError false
    }
    jacoco{
        version "0.7.4.201502262128"
    }
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
                def name = "${rootDir}/apk/sample.apk"
                output.outputFile = file(name)
            }
        }
    }
    task findbugs(type: FindBugs,dependsOn:"connectedAndroidTest") {//
        ignoreFailures = true
        effort = "default"
        reportLevel = "medium"
        //这里填写项目classes目录
        classes = files("${project.rootDir}/andbase-core/build/intermediates/classes")
        source = fileTree('src/main/java')
        classpath = files()
        reports {
            //只能开启一个
            xml.enabled = true
            html.enabled = false
        }
    }
    task jacocoTestReport(type:JacocoReport){//,dependsOn:"connectedAndroidTest"
        group = "Reporting"
        description = "Generate Jacoco coverage reports after running tests."
        reports{
            xml.enabled = false
            html.enabled = true
            csv.enabled = false
        }
        classDirectories = fileTree(
                dir : "$buildDir/intermediates/classes/debug",
                excludes : [
                        '**/*Test.class',
                        '**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        '**/Manifest*.*'
                ]
        )
        def coverageSourceDirs = ['src/main/java']
        additionalSourceDirs = files(coverageSourceDirs)
        sourceDirectories = files(coverageSourceDirs)
        additionalClassDirs = files(coverageSourceDirs)
        executionData = files("$buildDir/outputs/code-coverage/connected/coverage.ec")
    }

    dependencies {
        compile fileTree(dir: 'libs', include: ['*.jar'])
        testCompile 'junit:junit:4.12'
        compile 'com.android.support:appcompat-v7:25.0.0'
        compile 'com.android.support:design:25.0.0'
        compile 'net.sourceforge.pmd:pmd:5.4.0'
    }
}