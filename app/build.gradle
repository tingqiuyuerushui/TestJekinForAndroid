apply plugin: 'com.android.application'
apply plugin: 'findbugs'
apply from: '../quality.gradle'
android {
    compileSdkVersion 25
    buildToolsVersion '26.0.2'

    defaultConfig {
        applicationId "com.xw.sample.dashboardviewdemo"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 2
        versionName "2.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug{
            testCoverageEnabled true
        }
    }
    lintOptions {
        abortOnError false
    }
    jacoco{
        version "0.7.4.201502262128"
    }
    android.applicationVariants.all {variant ->
        variant.outputs.all {
            outputFileName = "${variant.name}-${variant.versionName}.apk"
        }
    }
    task customFindbugs(type: FindBugs) {
        ignoreFailures = true
        effort = "default"
        reportLevel = "medium"
        classes = files("$project.buildDir/intermediates/classes")
        excludeFilter = file("$rootProject.rootDir/findbug_filter.xml")

        source = fileTree('src/main/java/')
        classpath = files()
        reports {
            xml.enabled = false
            xml.withMessages = true
            html.enabled = !xml.isEnabled()
            xml.destination "$project.buildDir/outputs/findbugs/findbugs-output.xml"
            html.destination "$project.buildDir/outputs/findbugs/findbugs-output.html"
        }
    }
    task jacocoTestReport(type:JacocoReport){//,dependsOn:"connectedAndroidTest"
        group = "Reporting"
        description = "Generate Jacoco coverage reports after running tests."
        reports{
            xml.enabled = false
            html.enabled = true
            csv.enabled = false
        }
        classDirectories = fileTree(
                dir : "$buildDir/intermediates/classes/debug",
                excludes : [
                        '**/*Test.class',
                        '**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        '**/Manifest*.*'
                ]
        )
        def coverageSourceDirs = ['src/main/java']
        additionalSourceDirs = files(coverageSourceDirs)
        sourceDirectories = files(coverageSourceDirs)
        additionalClassDirs = files(coverageSourceDirs)
        executionData = files("$buildDir/outputs/code-coverage/connected/coverage.ec")
    }

    dependencies {
        compile fileTree(dir: 'libs', include: ['*.jar'])
        testCompile 'junit:junit:4.12'
        compile 'com.android.support:appcompat-v7:25.0.0'
        compile 'com.android.support:design:25.0.0'
        compile 'net.sourceforge.pmd:pmd:5.4.0'
    }
}